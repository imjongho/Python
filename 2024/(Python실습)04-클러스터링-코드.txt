!pip install scikit-learn-extra

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn import datasets
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans, AgglomerativeClustering, DBSCAN
from sklearn_extra.cluster import KMedoids
from sklearn.metrics import silhouette_score

"""
#완인 데이터셋 불러오기
wine = datasets.load_wine()
X = wine.data

#데이터 표준화
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

#np.mean(X, axis=0)
#np.mean(X_scaled, axis = 0)


# 클러스터링 모델 정의
kmeans = KMeans(n_clusters=3, random_state=42)
kmedoids = KMedoids(n_clusters=3, random_state=42)
agg_clustering = AgglomerativeClustering(n_clusters=3)
dbscan = DBSCAN(eps=2, min_samples=5)

# 클러스터링 모델 학습
kmeans_clusters = kmeans.fit_predict(X_scaled)
kmedoids_clusters = kmedoids.fit_predict(X_scaled)
agg_clusters = agg_clustering.fit_predict(X_scaled)
dbscan_clusters = dbscan.fit_predict(X_scaled)

# 실루엣 점수 계산
kmeans_silhouette = silhouette_score(X_scaled, kmeans_clusters)
kmedoids_silhouette = silhouette_score(X_scaled, kmedoids_clusters)
agg_silhouette = silhouette_score(X_scaled, agg_clusters)
dbscan_silhouette = silhouette_score(X_scaled, dbscan_clusters)

# 결과 출력
print(f"K-Means 실루엣 점수: {kmeans_silhouette:.2f}")
print(f"K-Medoids 실루엣 점수: {kmedoids_silhouette:.2f}")
print(f"계층적 클러스터링 실루엣 점수: {agg_silhouette:.2f}")
print(f"DBSCAN 실루엣 점수: {dbscan_silhouette:.2f}")

# 시각화를 위한 함수
def plot_clusters(X, labels, title):
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.title(title)
    plt.xlabel('Feature 0')
    plt.ylabel('Feature 1')
    plt.show()

# K-Means 시각화
plot_clusters(X, kmeans.labels_, 'K-Means Clustering')

# K-Medoids 시각화
plot_clusters(X, kmedoids.labels_, 'K-Medoids Clustering')

# 계층적 클러스터링 시각화
plot_clusters(X, agg_clusters, 'Hierarchical Clustering')

# DBSCAN 시각화
plot_clusters(X, dbscan.labels_, 'DBSCAN')
"""


from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# 와인 데이터셋 불러오기
wine = datasets.load_wine()
X = wine.data

# 표준화
scaler = StandardScaler()
X_std = scaler.fit_transform(X)

# 주성분 분석 (PCA) 적용
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_std)

# 클러스터 개수 설정
n_clusters = 3

# 클러스터링 알고리즘 적용
kmeans = KMeans(n_clusters=n_clusters)
kmedoids = KMedoids(n_clusters=n_clusters, random_state=42)
agg_clustering = AgglomerativeClustering(n_clusters=n_clusters)
dbscan = DBSCAN(eps=3, min_samples=5)

kmeans_clusters = kmeans.fit_predict(X_pca)
kmedoids_clusters = kmedoids.fit_predict(X_pca)
agg_clusters = agg_clustering.fit_predict(X_pca)
dbscan_clusters = dbscan.fit_predict(X_pca)

# 실루엣 점수 계산
kmeans_silhouette = silhouette_score(X_pca, kmeans_clusters)
kmedoids_silhouette = silhouette_score(X_pca, kmedoids_clusters)
agg_silhouette = silhouette_score(X_pca, agg_clusters)
# dbscan_silhouette = silhouette_score(X_pca, dbscan_clusters)

print("K-Means 실루엣 점수: {:.2f}".format(kmeans_silhouette))
print("K-Medoids (sklearn-extra) 실루엣 점수: {:.2f}".format(kmedoids_silhouette))
print("계층적 클러스터링 실루엣 점수: {:.2f}".format(agg_silhouette))
# print("DBSCAN 실루엣 점수: {:.2f}".format(dbscan_silhouette))

# 시각화를 위한 함수
def plot_clusters(X, labels, title):
    plt.scatter(X[:, 0], X[:, 1], c=labels, cmap='viridis')
    plt.title(title)
    plt.xlabel('Feature 0')
    plt.ylabel('Feature 1')
    plt.show()

# K-Means 시각화
plot_clusters(X, kmeans.labels_, 'K-Means Clustering')

# K-Medoids 시각화
plot_clusters(X, kmedoids.labels_, 'K-Medoids Clustering')

# 계층적 클러스터링 시각화
plot_clusters(X, agg_clusters, 'Hierarchical Clustering')

# DBSCAN 시각화
plot_clusters(X, dbscan.labels_, 'DBSCAN')

